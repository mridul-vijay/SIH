{
  "name": "arogya-kerala-backend",
  "version": "1.0.0",
  "description": "Digital Health Record Management System for Migrant Workers in Kerala - Backend API",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "seed": "node scripts/seedDatabase.js"
  },
  "keywords": [
    "healthcare",
    "migrant-workers",
    "kerala",
    "digital-health",
    "telemedicine",
    "vaccination-tracking"
  ],
  "author": "Arogya Kerala Team",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.5.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.2",
    "cors": "^2.8.5",
    "multer": "^1.4.5-lts.1",
    "nodemailer": "^6.9.4",
    "dotenv": "^16.3.1",
    "helmet": "^7.0.0",
    "express-rate-limit": "^6.10.0",
    "compression": "^1.7.4",
    "validator": "^13.11.0",
    "moment": "^2.29.4",
    "crypto": "^1.0.1",
    "node-cron": "^3.0.2",
    "socket.io": "^4.7.2",
    "twilio": "^4.15.0",
    "firebase-admin": "^11.10.1",
    "axios": "^1.5.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.6.4",
    "supertest": "^6.3.3",
    "@types/jest": "^29.5.5"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  }
}

// .env.example file content:
/*
# Server Configuration
PORT=5000
NODE_ENV=development

# Database
MONGODB_URI=mongodb://localhost:27017/arogya-kerala

# JWT Secret
JWT_SECRET=your-super-secret-jwt-key-here-make-it-long-and-secure

# Email Configuration
EMAIL_USER=your-email@gmail.com
EMAIL_PASS=your-app-password

# Frontend URL (for email verification links)
FRONTEND_URL=http://localhost:3000

# File Upload Configuration
MAX_FILE_SIZE=10485760
ALLOWED_FILE_TYPES=pdf,jpg,jpeg,png,doc,docx

# Twilio (for SMS notifications)
TWILIO_ACCOUNT_SID=your-twilio-sid
TWILIO_AUTH_TOKEN=your-twilio-token
TWILIO_PHONE_NUMBER=+1234567890

# Firebase (for push notifications)
FIREBASE_PROJECT_ID=your-firebase-project
FIREBASE_PRIVATE_KEY=your-firebase-private-key
FIREBASE_CLIENT_EMAIL=your-firebase-client-email

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=100

# Encryption
ENCRYPTION_KEY=your-32-character-encryption-key

# API Keys
GOOGLE_MAPS_API_KEY=your-google-maps-api-key
*/

// scripts/seedDatabase.js
/*
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Import models
const User = require('../models/User');
const MigrantWorker = require('../models/MigrantWorker');
const HealthAlert = require('../models/HealthAlert');

const seedDatabase = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('Connected to database');

    // Clear existing data
    await User.deleteMany({});
    await MigrantWorker.deleteMany({});
    await HealthAlert.deleteMany({});

    // Create admin user
    const adminPassword = await bcrypt.hash('admin123', 12);
    const adminUser = new User({
      email: 'admin@arogyakerala.gov.in',
      password: adminPassword,
      role: 'admin',
      profile: {
        firstName: 'System',
        lastName: 'Administrator',
        organization: 'Kerala Health Department',
        designation: 'System Administrator'
      },
      isVerified: true
    });
    await adminUser.save();

    // Create healthcare provider
    const providerPassword = await bcrypt.hash('provider123', 12);
    const providerUser = new User({
      email: 'doctor@arogyakerala.gov.in',
      password: providerPassword,
      role: 'healthcare_provider',
      profile: {
        firstName: 'Dr. Priya',
        lastName: 'Nair',
        organization: 'Government General Hospital',
        designation: 'Chief Medical Officer'
      },
      isVerified: true
    });
    await providerUser.save();

    // Create sample migrant workers
    const sampleWorkers = [
      {
        workerId: 'WKR_001',
        personalInfo: {
          firstName: 'Rajesh',
          lastName: 'Kumar',
          dateOfBirth: new Date('1985-06-15'),
          gender: 'male',
          nationality: 'Indian',
          homeState: 'Uttar Pradesh',
          languages: ['Hindi', 'English']
        },
        contactInfo: {
          phone: '+91-9876543210',
          currentAddress: {
            city: 'Kochi',
            district: 'Ernakulam',
            state: 'Kerala',
            pincode: '682001'
          }
        },
        employmentInfo: {
          currentEmployer: 'Construction Company Ltd',
          jobType: 'Construction Worker',
          workLocation: 'Kochi Metro Project'
        },
        healthStatus: {
          bloodGroup: 'B+',
          height: 170,
          weight: 65
        },
        consentGiven: true
      },
      // Add more sample workers...
    ];

    for (const workerData of sampleWorkers) {
      const worker = new MigrantWorker(workerData);
      await worker.save();
    }

    console.log('Database seeded successfully');
    process.exit(0);
  } catch (error) {
    console.error('Error seeding database:', error);
    process.exit(1);
  }
};

seedDatabase();
*/

// middleware/security.js
/*
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');

const securityMiddleware = (app) => {
  // Basic security headers
  app.use(helmet());

  // Rate limiting
  const limiter = rateLimit({
    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000, // 15 minutes
    max: parseInt(process.env.RATE_LIMIT_MAX) || 100, // limit each IP to 100 requests per windowMs
    message: 'Too many requests from this IP, please try again later.',
    standardHeaders: true,
    legacyHeaders: false
  });

  app.use('/api/', limiter);

  // Stricter rate limiting for auth endpoints
  const authLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 5, // limit each IP to 5 requests per windowMs
    message: 'Too many authentication attempts, please try again later.',
    standardHeaders: true,
    legacyHeaders: false
  });

  app.use('/api/auth/', authLimiter);
};

module.exports = securityMiddleware;
*/

// services/notificationService.js
/*
const nodemailer = require('nodemailer');
const twilio = require('twilio');
const admin = require('firebase-admin');

class NotificationService {
  constructor() {
    // Initialize email transporter
    this.emailTransporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });

    // Initialize Twilio client
    this.twilioClient = twilio(
      process.env.TWILIO_ACCOUNT_SID,
      process.env.TWILIO_AUTH_TOKEN
    );

    // Initialize Firebase Admin
    if (process.env.FIREBASE_PROJECT_ID) {
      admin.initializeApp({
        credential: admin.credential.cert({
          projectId: process.env.FIREBASE_PROJECT_ID,
          privateKey: process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n'),
          clientEmail: process.env.FIREBASE_CLIENT_EMAIL
        })
      });
    }
  }

  async sendEmail(to, subject, html, attachments = []) {
    try {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to,
        subject,
        html,
        attachments
      };

      const result = await this.emailTransporter.sendMail(mailOptions);
      console.log('Email sent:', result.messageId);
      return result;
    } catch (error) {
      console.error('Email sending error:', error);
      throw error;
    }
  }

  async sendSMS(to, message) {
    try {
      const result = await this.twilioClient.messages.create({
        body: message,
        from: process.env.TWILIO_PHONE_NUMBER,
        to
      });

      console.log('SMS sent:', result.sid);
      return result;
    } catch (error) {
      console.error('SMS sending error:', error);
      throw error;
    }
  }

  async sendPushNotification(tokens, title, body, data = {}) {
    try {
      const message = {
        notification: { title, body },
        data,
        tokens: Array.isArray(tokens) ? tokens : [tokens]
      };

      const result = await admin.messaging().sendMulticast(message);
      console.log('Push notifications sent:', result.successCount);
      return result;
    } catch (error) {
      console.error('Push notification error:', error);
      throw error;
    }
  }

  async sendHealthAlert(workers, alert) {
    const promises = workers.map(async (worker) => {
      const notifications = [];

      // Send email if available
      if (worker.contactInfo.email) {
        notifications.push(
          this.sendEmail(
            worker.contactInfo.email,
            `Health Alert: ${alert.title}`,
            `
              <h2>${alert.title}</h2>
              <p><strong>Severity:</strong> ${alert.severity.toUpperCase()}</p>
              <p>${alert.message}</p>
              ${alert.actionRequired ? `<p><strong>Action Required:</strong> ${alert.actionRequired}</p>` : ''}
              ${alert.contactInfo.phone ? `<p><strong>Contact:</strong> ${alert.contactInfo.phone}</p>` : ''}
              <hr>
              <p><small>This is an automated message from Arogya Kerala Health System.</small></p>
            `
          )
        );
      }

      // Send SMS if phone available
      if (worker.contactInfo.phone) {
        const smsMessage = `HEALTH ALERT (${alert.severity.toUpperCase()}): ${alert.title}. ${alert.message}${alert.contactInfo.phone ? ` Contact: ${alert.contactInfo.phone}` : ''}`;
        notifications.push(
          this.sendSMS(worker.contactInfo.phone, smsMessage)
        );
      }

      return Promise.allSettled(notifications);
    });

    return Promise.allSettled(promises);
  }
}

module.exports = new NotificationService();
*/

// services/analyticsService.js
/*
const Analytics = require('../models/Analytics');
const MigrantWorker = require('../models/MigrantWorker');
const Consultation = require('../models/Consultation');
const HealthAlert = require('../models/HealthAlert');

class AnalyticsService {
  async generateDailyAnalytics(date = new Date()) {
    try {
      const startOfDay = new Date(date.setHours(0, 0, 0, 0));
      const endOfDay = new Date(date.setHours(23, 59, 59, 999));

      // Get unique locations
      const locations = await MigrantWorker.distinct('contactInfo.currentAddress.district');

      for (const location of locations) {
        const analytics = await this.calculateLocationAnalytics(location, startOfDay, endOfDay);
        
        await Analytics.findOneAndUpdate(
          { date: startOfDay, location },
          analytics,
          { upsert: true, new: true }
        );
      }

      console.log('Daily analytics generated successfully');
    } catch (error) {
      console.error('Error generating analytics:', error);
    }
  }

  async calculateLocationAnalytics(location, startDate, endDate) {
    const locationQuery = { 'contactInfo.currentAddress.district': location };

    const metrics = {
      totalRegistrations: await MigrantWorker.countDocuments({
        ...locationQuery,
        registrationDate: { $gte: startDate, $lte: endDate }
      }),
      activeWorkers: await MigrantWorker.countDocuments({
        ...locationQuery,
        isActive: true
      }),
      healthCheckups: await MigrantWorker.countDocuments({
        ...locationQuery,
        'healthRecords.date': { $gte: startDate, $lte: endDate }
      }),
      vaccinations: await MigrantWorker.countDocuments({
        ...locationQuery,
        'vaccinations.dateAdministered': { $gte: startDate, $lte: endDate }
      }),
      consultations: await Consultation.countDocuments({
        scheduledDate: { $gte: startDate, $lte: endDate },
        status: 'completed'
      }),
      alerts: await HealthAlert.countDocuments({
        createdAt: { $gte: startDate, $lte: endDate },
        'targetAudience.location': location
      })
    };

    return { metrics, location, date: startDate };
  }

  async getHealthTrends(location, days = 30) {
    const endDate = new Date();
    const startDate = new Date(endDate.getTime() - (days * 24 * 60 * 60 * 1000));

    const trends = await Analytics.find({
      location,
      date: { $gte: startDate, $lte: endDate }
    }).sort({ date: 1 });

    return trends;
  }

  async getDiseaseOutbreakData(location, timeframe = 'month') {
    // Implement disease outbreak tracking logic
    const workers = await MigrantWorker.find({
      'contactInfo.currentAddress.district': location,
      'healthRecords.diagnosis': { $exists: true }
    });

    // Analyze diagnosis patterns and detect potential outbreaks
    const diseaseCount = {};
    workers.forEach(worker => {
      worker.healthRecords.forEach(record => {
        if (record.diagnosis) {
          diseaseCount[record.diagnosis] = (diseaseCount[record.diagnosis] || 0) + 1;
        }
      });
    });

    return Object.entries(diseaseCount)
      .map(([disease, count]) => ({ disease, cases: count }))
      .sort((a, b) => b.cases - a.cases);
  }
}

module.exports = new AnalyticsService();
*/

// jobs/scheduledJobs.js
/*
const cron = require('node-cron');
const AnalyticsService = require('../services/analyticsService');
const NotificationService = require('../services/notificationService');
const MigrantWorker = require('../models/MigrantWorker');
const moment = require('moment');

class ScheduledJobs {
  static init() {
    // Generate daily analytics at midnight
    cron.schedule('0 0 * * *', async () => {
      console.log('Running daily analytics job...');
      await AnalyticsService.generateDailyAnalytics();
    });

    // Check for vaccination reminders daily at 9 AM
    cron.schedule('0 9 * * *', async () => {
      console.log('Checking vaccination reminders...');
      await this.checkVaccinationReminders();
    });

    // Check for overdue health checkups weekly
    cron.schedule('0 10 * * 1', async () => {
      console.log('Checking overdue health checkups...');
      await this.checkOverdueCheckups();
    });

    // Clean up expired alerts daily
    cron.schedule('0 2 * * *', async () => {
      console.log('Cleaning up expired alerts...');
      await this.cleanupExpiredAlerts();
    });
  }

  static async checkVaccinationReminders() {
    try {
      const upcomingDate = moment().add(7, 'days').toDate();
      
      const workersNeedingVaccination = await MigrantWorker.find({
        'vaccinations.nextDueDate': { $lte: upcomingDate },
        isActive: true
      });

      for (const worker of workersNeedingVaccination) {
        const overdueVaccinations = worker.vaccinations.filter(
          vac => moment(vac.nextDueDate).isBefore(upcomingDate)
        );

        if (overdueVaccinations.length > 0) {
          await NotificationService.sendEmail(
            worker.contactInfo.email,
            'Vaccination Reminder - Arogya Kerala',
            `
              <h2>Vaccination Reminder</h2>
              <p>Dear ${worker.personalInfo.firstName},</p>
              <p>This is a reminder that you have vaccinations due:</p>
              <ul>
                ${overdueVaccinations.map(vac => 
                  `<li>${vac.vaccineName} - Due: ${moment(vac.nextDueDate).format('DD/MM/YYYY')}</li>`
                ).join('')}
              </ul>
              <p>Please contact your healthcare provider to schedule your vaccination.</p>
            `
          );
        }
      }
    } catch (error) {
      console.error('Error checking vaccination reminders:', error);
    }
  }

  static async checkOverdueCheckups() {
    try {
      const sixMonthsAgo = moment().subtract(6, 'months').toDate();
      
      const workersNeedingCheckup = await MigrantWorker.find({
        $or: [
          { 'healthStatus.lastCheckup': { $lt: sixMonthsAgo } },
          { 'healthStatus.lastCheckup': { $exists: false } }
        ],
        isActive: true
      });

      for (const worker of workersNeedingCheckup) {
        await NotificationService.sendSMS(
          worker.contactInfo.phone,
          `Health Reminder: It's time for your regular health checkup. Please visit the nearest healthcare center. Contact: 1800-XXX-XXXX - Arogya Kerala`
        );
      }
    } catch (error) {
      console.error('Error checking overdue checkups:', error);
    }
  }

  static async cleanupExpiredAlerts() {
    try {
      await HealthAlert.updateMany(
        { expiryDate: { $lt: new Date() } },
        { $set: { isActive: false } }
      );
    } catch (error) {
      console.error('Error cleaning up expired alerts:', error);
    }
  }
}

module.exports = ScheduledJobs;
*/

// tests/api.test.js
/*
const request = require('supertest');
const mongoose = require('mongoose');
const app = require('../server');

describe('Arogya Kerala API Tests', () => {
  beforeAll(async () => {
    // Connect to test database
    await mongoose.connect(process.env.MONGODB_TEST_URI || 'mongodb://localhost:27017/arogya-kerala-test');
  });

  afterAll(async () => {
    // Clean up and close connection
    await mongoose.connection.close();
  });

  describe('Authentication', () => {
    test('POST /api/auth/register should create a new user', async () => {
      const userData = {
        email: 'test@example.com',
        password: 'password123',
        role: 'healthcare_provider',
        profile: {
          firstName: 'Test',
          lastName: 'User'
        }
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(userData)
        .expect(201);

      expect(response.body.message).toContain('registered successfully');
    });

    test('POST /api/auth/login should authenticate user', async () => {
      // First verify the test user
      // Then attempt login
      const loginData = {
        email: 'test@example.com',
        password: 'password123'
      };

      const response = await request(app)
        .post('/api/auth/login')
        .send(loginData)
        .expect(200);

      expect(response.body).toHaveProperty('token');
      expect(response.body.user).toHaveProperty('email', 'test@example.com');
    });
  });

  describe('Worker Management', () => {
    let authToken;

    beforeAll(async () => {
      // Get auth token for protected routes
      const loginResponse = await request(app)
        .post('/api/auth/login')
        .send({
          email: 'test@example.com',
          password: 'password123'
        });
      
      authToken = loginResponse.body.token;
    });

    test('POST /api/workers/register should create a new worker', async () => {
      const workerData = {
        personalInfo: {
          firstName: 'John',
          lastName: 'Doe',
          gender: 'male'
        },
        contactInfo: {
          phone: '+91-9876543210',
          currentAddress: {
            district: 'Ernakulam'
          }
        },
        consentGiven: true
      };

      const response = await request(app)
        .post('/api/workers/register')
        .set('Authorization', `Bearer ${authToken}`)
        .send(workerData)
        .expect(201);

      expect(response.body).toHaveProperty('workerId');
    });

    test('GET /api/workers should return workers list', async () => {
      const response = await request(app)
        .get('/api/workers')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body).toHaveProperty('workers');
      expect(Array.isArray(response.body.workers)).toBe(true);
    });
  });

  describe('Health Records', () => {
    // Add health record tests
  });
});
*/

// docker-compose.yml
/*
version: '3.8'

services:
  app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/arogya-kerala
    depends_on:
      - mongo
      - redis
    volumes:
      - ./uploads:/app/uploads
    networks:
      - arogya-network

  mongo:
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - arogya-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - arogya-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl
    depends_on:
      - app
    networks:
      - arogya-network

volumes:
  mongodb_data:

networks:
  arogya-network:
    driver: bridge
*/

// Dockerfile
/*
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Create uploads directory
RUN mkdir -p uploads

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js

# Start the application
CMD ["npm", "start"]
*/

// README.md content would include:
/*
# Arogya Kerala - Digital Health Record Management System

## Overview
A comprehensive digital health record management system designed specifically for migrant workers in Kerala, India. This system aligns with UN Sustainable Development Goals and provides accessible healthcare services for vulnerable populations.

## Features
- Secure digital health records
- Multilingual support (Malayalam, Hindi, Tamil, English)
- Telemedicine consultations
- Vaccination tracking
- Disease outbreak alerts
- Health analytics dashboard
- Real-time notifications

## Tech Stack
- Backend: Node.js, Express.js
- Database: MongoDB
- Authentication: JWT
- Notifications: Twilio (SMS), Firebase (Push), Nodemailer (Email)
- File Storage: AWS S3 / Google Cloud Storage
- Deployment: Docker, Nginx

## Installation

### Prerequisites
- Node.js 16+
- MongoDB 5+
- Redis (optional, for caching)

### Setup
1. Clone the repository
2. Install dependencies: `npm install`
3. Copy `.env.example` to `.env` and configure
4. Run database migrations: `npm run seed`
5. Start the server: `npm run dev`

## API Documentation
Detailed API documentation available at `/api/docs` when server is running.

## Deployment
Use Docker Compose for production deployment:
```bash
docker-compose up -d
```

## Contributing
Please read CONTRIBUTING.md for contribution guidelines.

## License
MIT License - see LICENSE file for details.
*/